import "partnerNotifyReady.proto";
import "partnerNotifyOfPeeredModifiedResponse.proto";
import "partnerRequestSequenceBlock.proto";
import "partnerNotifyOfPeeredModified.proto";
import "partnerFirstPhaseResultMessage.proto";
import "partnerAdditionalSubscriber.proto";
import "partnerRemovedSubscriber.proto";
import "partnerBackoutCommitRequest.proto";
import "partnerCompleteCommitRequest.proto";
import "partnerCommitRequest.proto";
import "partnerStop.proto";

message GeneralMessage
{
    enum MessageType {
        PARTNER_NOTIFY_READY = 0;
        PARTNER_NOTIFY_OF_PEERED_MODIFIED_RESPONSE = 1;
        PARTNER_REQUEST_SEQUENCE_BLOCK = 2;
        PARTNER_NOTIFY_OF_PEERED_MODIFIED = 3;
        PARTNER_FIRST_PHASE_RESULT = 4;
        PARTNER_ADDITIONAL_SUBSCRIBER = 5;
        PARTNER_REMOVED_SUBSCRIBER = 6;
        PARTNER_BACKOUT_COMMIT_REQUEST = 7;
        PARTNER_COMPLETE_COMMIT_REQUEST = 8;
        PARTNER_COMMIT_REQUEST = 9;
        PARTNER_STOP = 10;
    }

    required MessageType message_type = 1;
    optional PartnerNotifyReady notify_ready = 2;
    optional PartnerNotifyOfPeeredModifiedResponse notify_of_peered_modified_resp = 3;
    optional PartnerRequestSequenceBlock request_sequence_block = 4;
    optional PartnerNotifyOfPeeredModified notify_of_peered_modified = 5;
    optional PartnerFirstPhaseResultMessage first_phase_result = 6;
    optional PartnerAdditionalSubscriber additional_subscriber = 7;
    optional PartnerRemovedSubscriber removed_subscriber = 8;
    optional PartnerBackoutCommitRequest backout_commit_request = 9;
    optional PartnerCompleteCommitRequest complete_commit_request = 10;
    optional PartnerCommitRequest commit_request = 11;
    optional PartnerStop stop = 12;
}
