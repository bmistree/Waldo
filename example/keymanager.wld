Basic

Endpoint Manager;
Endpoint Client;

Sequences
{
  get_new_key:
    Client.request_key ->
    Manager.send_key;
  get_key:
    Client.request_secret ->
    Manager.send_secret;
  evaluate_key:
    Client.send_key ->
    Manager.send_information;
  revoke_key:
    Client.send_key ->
    Manager.exchange_key;
  deactive_key:
    Client.send_key ->
    Manager.deactive_key;
  destroy_key:
    Client.send_key ->
    Manager.destroy_key;
}

Struct Secret
{
    Number encryption;
    String nonce;
}

Map(from: Text, to: Secret) nonces;

Sequence get_new_key(Number type_of_encryption, Text id)
    returns Secret cipher_ingredients
{
    Client.request_key{}
    Manager.send_key
    {
        Secret entry;
        entry.encryption = type_of_encryption;
        entry.iv = signal(random);
        nonces[id] = entry;
    }
}

Sequence get_key(Text id)
    returns Secret entry
{
    Client.request_key{}
    Manager.send_key
    {
        return nonces[id];
    }
}

Client
{
    Public Function increment(Number to_increment) returns Number
    {
        // issue a sequence call to partner endpoint
        return other_side_increment(to_increment);
    }
}

Manager
{
    Function (in: Nothing; returns: Number) random;

    // initializes 
    onCreate(Function (in: Nothing; returns: Number) random_gen)
    {
        random = random_gen;
    }
}
