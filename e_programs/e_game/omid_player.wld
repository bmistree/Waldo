omid_player

Endpoint OmidPlayer;
Endpoint OmidPlayerHelper;


Sequences {
  AddUser: OmidPlayer.doNothing -> OmidPlayerHelper.add_to_server;
  JoinWaiting: OmidPlayer.doNothing -> OmidPlayerHelper.addToWaiting;
  LeaveWaiting: OmidPlayer.doNothing -> OmidPlayerHelper.removePlayer;
  CheckGameInSession: OmidPlayer.doNothing -> OmidPlayerHelper.checkServer;
  SendWaitingMsg: OmidPlayer.doNothing -> OmidPlayerHelper.sendServer;
  DisplayWaiting: OmidPlayerHelper.doNothing -> OmidPlayer.displayWaitingMessage;
  UpdateGame: OmidPlayerHelper.setMap -> OmidPlayer.updateMap;
  AddToGame: OmidPlayer.doNothing -> OmidPlayerHelper.addPlayer;
  SendAnswer: OmidPlayer.doNothing -> OmidPlayerHelper.send;
}

Struct node_information {
    Text answer;
    Text node_num;
    Number x;
    Number y;
    TrueFalse found;
}

Struct arc_information {
    Text node1;
    Text node2;
}


Peered {
    Text username;
}

Sequence SendAnswer(Text node_num, Text answer) {
    Number score;
    OmidPlayer.doNothing{}
    OmidPlayerHelper.send{
        print("about to execute game_server checknode");
        score = game_server.checkNode(username, node_num, answer);
        print("sent. Still in sequence");
    }
}

Sequence AddUser() {
    OmidPlayer.doNothing{}
    OmidPlayerHelper.add_to_server{
        game_server.add_player(username, self);
    }
}

Sequence SendWaitingMsg(Text message) {
    OmidPlayer.doNothing{}
    OmidPlayerHelper.sendServer{
        game_server.broadcastWaitingMessage(message);
    }        
}

Sequence AddToGame() {
    OmidPlayer.doNothing{}
    OmidPlayerHelper.addPlayer {
        game_server.add_player(username);
    }
}

Sequence JoinWaiting() {
    OmidPlayer.doNothing {}
    OmidPlayerHelper.addToWaiting {
        game_server.add_to_waiting(username, self);
    }
}

Sequence LeaveWaiting() {
    OmidPlayer.doNothing{}
    OmidPlayerHelper.removePlayer {
        game_server.remove_from_waiting(username);
    }
}

Sequence CheckGameInSession() returns TrueFalse game_in_sess {
    OmidPlayer.doNothing{}
    OmidPlayerHelper.checkServer{
        game_in_sess = game_server.check_game_in_session();
    }
}

Sequence DisplayWaiting(Text message) {
    OmidPlayerHelper.doNothing{}
    OmidPlayer.displayWaitingMessage{
        extCopy message to waiting_message;
    }
}

Sequence UpdateGame() {
    Map(from: Text, to: Struct node_information) node_map;
    List(element: Struct arc_information) arc_map;
    Number score;
    OmidPlayerHelper.setMap{
        node_map = nodes;
        arc_map = arcs;
        score = game_server.get_score(username);
    }
    OmidPlayer.updateMap{
        clear_map();
        update_score(score);
        for (Text answer in node_map) {
            Struct node_information info = node_map[answer];
            //extCopy info to draw_circle;
            draw_circle(info.x, info.x, info.found, info.node_num, info.answer);
        }
        for (Struct arc_information arc_info in arc_map) {
            Struct node_information node1 = node_map[arc_info.node1];
            Struct node_information node2 = node_map[arc_info.node2];
            if (node1.found and node2.found) {
                draw_arc(node1.x, node1.y, node2.x, node2.y);
                //List(element: Number) arc_pos = [node1.x, node1.y, node2.x, node2.y];
                //extCopy arc_pos to draw_arc;
                }
        }
        print("finished updating");
    }
}

OmidPlayer {
    External Text waiting_message;
    Function(in: Number, Number, TrueFalse, Text, Text; returns: Nothing) draw_circle;
    Function(in: Number, Number, Number, Number; returns: Nothing) draw_arc;
    Function(returns: Nothing) clear_map;
    Function(in: Number; returns: Nothing) update_score;
    onCreate(Text name, External Text gui, Function(in: Number, Number, TrueFalse, Text, Text; returns: Nothing) node, Function(in: Number, Number, Number, Number; returns: Nothing) arc /*External Struct node_information node, External List(element: Number) arc*/, Function(returns: Nothing) clear, Function (in: Number; returns: Nothing) score) {
        username = name;
        waiting_message = gui;
        draw_circle = node;
        draw_arc = arc;
        clear_map = clear;
        update_score = score;
        JoinWaiting();
    }
    Public Function add_to_game() {
        AddToGame();
    }

    Public Function game_in_session() returns TrueFalse {
        return CheckGameInSession();
    }
    /* Public Function game_ended() returns TrueFalse {
        return CheckGameOver();
        }*/
    Public Function send_to_waiting(Text message) {
        SendWaitingMsg(message);
    }

    Public Function send_answer(Text node_num, Text answer) {
        print("about to send a: " + node_num + " answer: " + answer);
        SendAnswer(node_num, answer);
        print("answer sent");
    }
}

OmidPlayerHelper {
    Endpoint game_server;
    Map(from: Text, to: Struct node_information) nodes;
    List(element: Struct arc_information) arcs;
    onCreate(Endpoint server) {
        game_server = server;
    }

    Public Function init_map(Map(from: Text, to: Struct node_information) node_info, List(element: Struct arc_information) arc_info) {
        nodes = node_info;
        arcs = arc_info;
        UpdateGame();
    }
    Public Function update_map(Text answer_found) {
        nodes[answer_found].found = True;
        UpdateGame();
    }

    Public Function get_new_waiting_message(Text message) {
        DisplayWaiting(message);
    }
}
